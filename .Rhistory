devtools:::document()
usethis::create_package()
usethis::create_package(".")
usethis::use_gpl_license()
xx <- read.csv("data-raw/smoking_cessation.csv")
xx
dati <- apply(xx, 1, \(x) {
trt <- as.character(x[-(1:2)])
ctrl <- rep(0, length(trt))
ctrl[as.integer(x[1])] <- 1
dd <- data.frame(study.id = as.integer(x[2]), treatment = names(xx)[-(1:2)],
cases = gsub(",", "", x = trt),
is.baseline = ctrl)
return(dd[dd$cases != "", ])
} , simplify = FALSE) |>
do.call(rbind, args = _)
View(dati)
cases.mat <- strsplit(dati[[3]], "/", fixed = TRUE) |>
vapply(as.numeric, numeric(2)) |>
t()
colnames(cases.mat) <- c("rik", "nik")
dati <- cbind(dati[-3], cases.mat)
dati
xx <- read.csv("data-raw/smoking_cessation.csv")
smoking <- apply(xx, 1, \(x) {
trt <- as.character(x[-(1:2)])
ctrl <- rep(0, length(trt))
ctrl[as.integer(x[1])] <- 1
dd <- data.frame(study.id = as.integer(x[2]), treatment = names(xx)[-(1:2)],
cases = gsub(",", "", x = trt),
is.baseline = ctrl)
return(dd[dd$cases != "", ])
} , simplify = FALSE) |>
do.call(rbind, args = _)
cases.mat <- strsplit(smoking[[3]], "/", fixed = TRUE) |>
vapply(as.numeric, numeric(2)) |>
t()
colnames(cases.mat) <- c("rik", "nik")
smoking <- cbind(smoking[-3], cases.mat)
xx <- read.csv("data-raw/thrombolytic_drugs.csv")
thromb <- apply(xx, 1, \(x) {
trt <- as.character(x[-(1:2)])
ctrl <- rep(0, length(trt))
ctrl[as.integer(x[1])] <- 1
dd <- data.frame(study.id = as.integer(x[2]), treatment = names(xx)[-(1:2)],
cases = gsub(",", "", x = trt),
is.baseline = ctrl)
return(dd[dd$cases != "", ])
} , simplify = FALSE) |>
do.call(rbind, args = _)
cases.mat <- strsplit(thromb[[3]], "/", fixed = TRUE) |>
vapply(as.numeric, numeric(2)) |>
t()
colnames(cases.mat) <- c("rik", "nik")
thromb <- cbind(thromb[-3], cases.mat)
usethis::use_data_raw("meta_lu_ades")
usethis::use_data(smoking, overwrite = TRUE)
usethis::use_data(thromb, overwrite = TRUE)
sapply(thromb, typeof)
sub.list <- c("µ" = "\\mu", "β" = "\\beta", "Σ" = "\\Sigma", "α" = "\\alpha",
"θ" = "\\theta", "ψ" = "\\psi", "Ψ" = "\\Psi", "λ" = "\\lambda")
sub.list
txt <- readLines(filenm)
filenm <- "data-raw/es1_quad.txt"
sub.list <- c("µ" = "\\mu", "β" = "\\beta", "Σ" = "\\Sigma", "α" = "\\alpha",
"θ" = "\\theta", "ψ" = "\\psi", "Ψ" = "\\Psi", "λ" = "\\lambda",
"t" = "\\theta")
txt <- readLines(filenm)
txt
sub.list <- c("µ" = "\\mu", "β" = "\\beta", "Σ" = "\\Sigma", "α" = "\\alpha",
"θ" = "\\theta", "ψ" = "\\psi", "Ψ" = "\\Psi", "λ" = "\\lambda",
"σ" = "\\sigma", "t" = "\\theta")
install.packages("stringr")
stringr::str_replace_all(txt, r"{_([0-9]{2, })}", r"{_{\1}}")
stringr::str_replace_all(txt, r"{_([0-9]{2, 10})}", r"{_{\1}}")
stringr::str_replace_all(txt, r"{_([0-9]+)}", r"{_{\1}}")
r"{_([0-9]{2, })}"
r"{_{\1}}"
stringr::str_replace_all(txt, r"{_([0-9]{2, })}", r"{_{\1}}")
stringr::str_replace_all(txt, r"{_([0-9]{2, 3})}", r"{_{\1}}")
stringr::str_replace_all(txt, r"{_([0-9]+)}", r"{_{\1}}")
stringr::str_replace_all(filenm, "([.]?[a-zA-Z]+?)$", "_tex\\1")
filenm <- "data-raw/es1_quad.txt"
sub.list <- c("µ" = "\\mu", "β" = "\\beta", "Σ" = "\\Sigma", "α" = "\\alpha",
"θ" = "\\theta", "ψ" = "\\psi", "Ψ" = "\\Psi", "λ" = "\\lambda",
"σ" = "\\sigma", "t" = "\\theta")
txt <- readLines(filenm)
for (i in seq_along(sub.list)) {
txt <- gsub(names(sub.list)[i], sub.list[i], txt, fixed = TRUE)
}
stringr::str_replace_all(txt, r"{_([0-9]+)}", r"{_{\1}}")
writeLines(txt, stringr::str_replace_all(filenm, "([.]?[a-zA-Z]+?)$", "_tex\\1"))
filenm <- "data-raw/es1_quad.txt"
sub.list <- c("µ" = "\\mu", "β" = "\\beta", "Σ" = "\\Sigma", "α" = "\\alpha",
"θ" = "\\theta", "ψ" = "\\psi", "Ψ" = "\\Psi", "λ" = "\\lambda",
"σ" = "\\sigma")
txt <- readLines(filenm)
for (i in seq_along(sub.list)) {
txt <- gsub(names(sub.list)[i], sub.list[i], txt, fixed = TRUE)
}
stringr::str_replace_all(txt, r"{_([0-9]+)}", r"{_{\1}}")
writeLines(txt, stringr::str_replace_all(filenm, "([.]?[a-zA-Z]+?)$", "_tex\\1"))
filenm <- "data-raw/es1_quad.txt"
sub.list <- c("µ" = "\\mu", "β" = "\\beta", "Σ" = "\\Sigma", "α" = "\\alpha",
"θ" = "\\theta", "ψ" = "\\psi", "Ψ" = "\\Psi", "λ" = "\\lambda",
"σ" = "\\sigma", "*" = "\\cdot")
txt <- readLines(filenm)
txt
for (i in seq_along(sub.list)) {
txt <- gsub(names(sub.list)[i], sub.list[i], txt, fixed = TRUE)
}
txt
txt <- stringr::str_replace_all(txt, r"{_([0-9]+)}", r"{_{\1}}")
txt
filenm <- "data-raw/es1_quad.txt"
sub.list <- c("µ" = "\\mu", "β" = "\\beta", "Σ" = "\\Sigma", "α" = "\\alpha",
"θ" = "\\theta", "ψ" = "\\psi", "Ψ" = "\\Psi", "λ" = "\\lambda",
"σ" = "\\sigma", "*" = " ")
txt <- readLines(filenm)
for (i in seq_along(sub.list)) {
txt <- gsub(names(sub.list)[i], sub.list[i], txt, fixed = TRUE)
}
txt <- stringr::str_replace_all(txt, r"{_([0-9]+)}", r"{_{\1}}")
writeLines(txt, stringr::str_replace_all(filenm, "([.]?[a-zA-Z]+?)$", "_tex\\1"))
filenm <- "data-raw/es1_quad.txt"
sub.list <- c("µ" = "\\mu", "β" = "\\beta", "Σ" = "\\Sigma", "α" = "\\alpha",
"θ" = "\\theta", "ψ" = "\\psi", "Ψ" = "\\Psi", "λ" = "\\lambda",
"σ" = "\\sigma", "*" = " ", "log" = "\\log", "exp" = "\\exp")
txt <- readLines(filenm)
for (i in seq_along(sub.list)) {
txt <- gsub(names(sub.list)[i], sub.list[i], txt, fixed = TRUE)
}
txt <- stringr::str_replace_all(txt, r"{_([0-9]+)}", r"{_{\1}}")
txt <- stringr::str_replace_all(txt, r"{\^+\(([^()]*)\)}", r"{^{\1}}")
txt <- stringr::str_replace_all(txt, r"{\(([^()]*)\) ?/ ?\(([^()]*)\)}", r"{\frac{\1}{\2}}")
writeLines(txt, stringr::str_replace_all(filenm, "([.]?[a-zA-Z]+?)$", "_tex\\1"))
filenm <- "data-raw/es1_quad.txt"
sub.list <- c("µ" = "\\mu", "β" = "\\beta", "Σ" = "\\Sigma", "α" = "\\alpha",
"θ" = "\\theta", "ψ" = "\\psi", "Ψ" = "\\Psi", "λ" = "\\lambda",
"σ" = "\\sigma", "*" = " ", " . " = " ", "log" = "\\log", "exp" = "\\exp")
txt <- readLines(filenm)
for (i in seq_along(sub.list)) {
txt <- gsub(names(sub.list)[i], sub.list[i], txt, fixed = TRUE)
}
txt <- stringr::str_replace_all(txt, r"{_([0-9]+)}", r"{_{\1}}")
txt <- stringr::str_replace_all(txt, r"{\^+\(([^()]*)\)}", r"{^{\1}}")
txt <- stringr::str_replace_all(txt, r"{\(([^()]*)\) ?/ ?\(([^()]*)\)}", r"{\frac{\1}{\2}}")
writeLines(txt, stringr::str_replace_all(filenm, "([.]?[a-zA-Z]+?)$", "_tex\\1"))
filenm <- "data-raw/es1_quad.txt"
sub.list <- c("µ" = "\\mu", "β" = "\\beta", "Σ" = "\\Sigma", "α" = "\\alpha",
"γ" = "\\gamma"
"θ" = "\\theta", "ψ" = "\\psi", "Ψ" = "\\Psi", "λ" = "\\lambda",
filenm <- "data-raw/es1_quad.txt"
sub.list <- c("µ" = "\\mu", "β" = "\\beta", "Σ" = "\\Sigma", "α" = "\\alpha",
"γ" = "\\gamma",
"θ" = "\\theta", "ψ" = "\\psi", "Ψ" = "\\Psi", "λ" = "\\lambda",
"σ" = "\\sigma", "*" = " ", " . " = " ", "log" = "\\log", "exp" = "\\exp")
txt <- readLines(filenm)
for (i in seq_along(sub.list)) {
txt <- gsub(names(sub.list)[i], sub.list[i], txt, fixed = TRUE)
}
txt <- stringr::str_replace_all(txt, r"{_([0-9]+)}", r"{_{\1}}")
txt <- stringr::str_replace_all(txt, r"{\^+\(([^()]*)\)}", r"{^{\1}}")
txt <- stringr::str_replace_all(txt, r"{\(([^()]*)\) ?/ ?\(([^()]*)\)}", r"{\frac{\1}{\2}}")
writeLines(txt, stringr::str_replace_all(filenm, "([.]?[a-zA-Z]+?)$", "_tex\\1"))
filenm <- "data-raw/es1_quad.txt"
sub.list <- c("µ" = "\\mu", "β" = "\\beta", "Σ" = "\\Sigma", "α" = "\\alpha",
"γ" = "\\gamma",
"θ" = "\\theta", "ψ" = "\\psi", "Ψ" = "\\Psi", "λ" = "\\lambda",
"σ" = "\\sigma", "*" = " ", " . " = " ", "log" = "\\log", "exp" = "\\exp")
txt <- readLines(filenm)
for (i in seq_along(sub.list)) {
txt <- gsub(names(sub.list)[i], sub.list[i], txt, fixed = TRUE)
}
txt <- stringr::str_replace_all(txt, r"{_([0-9]+)}", r"{_{\1}}")
txt <- stringr::str_replace_all(txt, r"{\^+\(([^()]*)\)}", r"{^{\1}}")
txt <- stringr::str_replace_all(txt, r"{\(([^()]*)\) ?/ ?\(([^()]*)\)}", r"{\frac{\1}{\2}}")
writeLines(txt, stringr::str_replace_all(filenm, "([.]?[a-zA-Z]+?)$", "_tex\\1"))
maxima2tex <- function(filenm) {
sub.list <- c("µ" = "\\mu", "β" = "\\beta", "Σ" = "\\Sigma", "α" = "\\alpha",
"γ" = "\\gamma",
"θ" = "\\theta", "ψ" = "\\psi", "Ψ" = "\\Psi", "λ" = "\\lambda",
"σ" = "\\sigma", "*" = " ", " . " = " ", "log" = "\\log", "exp" = "\\exp")
txt <- readLines(filenm)
for (i in seq_along(sub.list)) {
txt <- gsub(names(sub.list)[i], sub.list[i], txt, fixed = TRUE)
}
txt <- stringr::str_replace_all(txt, r"{_([0-9]+)}", r"{_{\1}}")
txt <- stringr::str_replace_all(txt, r"{\^+\(([^()]*)\)}", r"{^{\1}}")
txt <- stringr::str_replace_all(txt, r"{\(([^()]*)\) ?/ ?\(([^()]*)\)}", r"{\frac{\1}{\2}}")
writeLines(txt, stringr::str_replace_all(filenm, "([.]?[a-zA-Z]+?)$", "_tex\\1"))
}
maxima2tex("data-raw/es1_quad.txt")
maxima2tex("data-raw/es1_quad.txt")
maxima2tex("data-raw/es1_quad.txt")
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
smoking
smoking <- within(smoking, tik <- log(rik / (nik - rik)))
smoking
maxima2tex <- function(filenm) {
sub.list <- c("µ" = "\\mu", "β" = "\\beta", "Σ" = "\\Sigma", "α" = "\\alpha",
"γ" = "\\gamma",
"θ" = "\\theta", "ψ" = "\\psi", "Ψ" = "\\Psi", "λ" = "\\lambda",
"σ" = "\\sigma", "*" = " ", " . " = " ", "log" = "\\log", "exp" = "\\exp")
txt <- readLines(filenm)
for (i in seq_along(sub.list)) {
txt <- gsub(names(sub.list)[i], sub.list[i], txt, fixed = TRUE)
}
txt <- stringr::str_replace_all(txt, r"{_([0-9]+)}", r"{_{\1}}")
txt <- stringr::str_replace_all(txt, r"{\^+\(([^()]*)\)}", r"{^{\1}}")
txt <- stringr::str_replace_all(txt, r"{\(([^()]*)\) ?/ ?\(([^()]*)\)}", r"{\frac{\1}{\2}}")
writeLines(txt, stringr::str_replace_all(filenm, "([.]?[a-zA-Z]+?)$", "_tex\\1"))
}
maxima2tex("data-raw/diff_det_Sigma1.txt")
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
maxima2tex("data-raw/diff_score1.txt")
maxima2tex("data-raw/diff_score1.txt")
devtools::load_all(".")
smoking
smoking <- within(smoking, tik <- log(rik) - log(nik - rik))
smoking
theta.oss <- smoking[smoking$study.id == 3, "tik"]
theta.oss
Gamma <- crr.vcov.within(smoking[smoking$study.id == 3, "rik"],
smoking[smoking$study.id == 3, "nik"])
Gamma
param.mv <- optim(c(0, 1, 0, 1, 0, 1), \(x) -opt.fn(x, theta.oss, Gamma),
lower = c(-Inf, -Inf, -Inf, 1e-10, -1, 1e-10),
upper = c(Inf, Inf, Inf, Inf, 1, Inf),
method = "L-BFGS-B",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
param.mv <- optim(c(0, 1, 0, 1, 0, 1), \(x) -llik1(x, theta.oss, Gamma),
lower = c(-Inf, -Inf, -Inf, 1e-10, -1, 1e-10),
upper = c(Inf, Inf, Inf, Inf, 1, Inf),
method = "L-BFGS-B",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
param.mv
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
param.mv <- optim(c(0, 1, 0, 1, 0, 1), \(x) -llik1(x, theta.oss, Gamma),
lower = c(-Inf, -Inf, -Inf, 1e-10, -1, 1e-10),
upper = c(Inf, Inf, Inf, Inf, 1, Inf),
method = "L-BFGS-B",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
param.mv <- optim(c(0, 1, 0, 1, 0, 1), \(x) -llik1(x, theta.oss, Gamma),
lower = c(-Inf, -Inf, -Inf, 1e-10, -1, 1e-10),
upper = c(Inf, Inf, Inf, Inf, 1, Inf),
method = "L-BFGS-B",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
param.mv <- optim(c(0, 1, 0, 1, 0, 1), \(x) -llik1(x, theta.oss, Gamma),
lower = c(-Inf, -Inf, -Inf, 1e-10, -1, 1e-10),
upper = c(Inf, Inf, Inf, Inf, 1, Inf),
method = "L-BFGS-B",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
smoking[smoking$study.id == 3, ]
Gamma
View(smoking)
llik1 <- function(params, y, Gamma, design = c(0, 1)) {
params <- unname(params)
np <- length(design) - 1
alpha <- params[1:np]
beta <- params[(1 + np):(2 * np)]
mu0 <- params[2 * np + 1]
sigma20 <- params[2 * np + 2]
rho <- params[2 * np + 3]
sigma2 <- params[(2 * np + 4):length(params)]
stopifnot("`params` has wrong dimesion!" = length(sigma2) == np)
ll <- mvtnorm::dmvnorm(
y, mean = mu <- crr.mean.baseline0(alpha, beta, mu0, design),
sigma = Sigma <- crr.vcov.baseline0(beta, sigma20, sigma2, rho, design) + Gamma,
log = TRUE)
cat("PARAMS: ")
lapply(list(alpha, beta, mu0, sigma20, rho, sigma2), \(x) deparse1(round(x, 6))) |>
append(x = list(fmt = "alpha = %s, beta = %s, \n\tmu0 = %s, sigma20 = %s, rho = %s, \n\tsigma2 = %s"), values = _) |>
do.call(sprintf, args = _) |>
cat("\nVALUE: ", ll, "\n\n")
print(list(marginal_mu = mu, marginal_tildeSigma = Sigma))
cat("\n=====================================\n")
browser()
return(ll)
}
param.mv <- optim(c(0, 1, 0, 1, 0, 1), \(x) -llik1(x, theta.oss, Gamma),
lower = c(-Inf, -Inf, -Inf, 1e-10, -1, 1e-10),
upper = c(Inf, Inf, Inf, Inf, 1, Inf),
method = "L-BFGS-B",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
1.612999 + Gamma[1, 1]
beta^2 * sigma20
beta * sigma20
beta^2 * 1.612999 + Gamma[2, 2] + 1
1:10[1]
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
blockdiag(lapply(rpois(3)), \(x) matrix(rnorm(1), 1+x, 1+x))
lapply(rpois(3), \(x) matrix(rnorm(1), 1+x, 1+x))
lapply(rpois(10, 3), \(x) matrix(rnorm(1), 1+x, 1+x))
lapply(rpois(3, 1), \(x) matrix(rnorm(1), 1+x, 1+x))
lapply(rpois(3, 2), \(x) matrix(rnorm(1), 1+x, 1+x))
lapply(rpois(3, 1.2), \(x) matrix(rnorm(1), 1+x, 1+x))
lapply(rpois(3, 1.2), \(x) matrix(rnorm(1), 1+x, 1+x)) |> blockdiag()
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
lapply(rpois(3, 1.2), \(x) matrix(rnorm(1), 1+x, 1+x)) |> blockdiag()
blockdiag <- function(mats, fill = 0) {
if (is.matrix(mats)) return(mats)
stopifnot("only square matrices are supported!" = sapply(mats, nrow) == (nc <- sapply(mats, ncol)))
out <- matrix(fill, sum(nc), sum(nc))
ncc <- c(1, cumsum(nc))
browser()
for (i in seq_along(mats)) {
out[ncc[i]:ncc[i + 1], ncc[i]:ncc[i + 1]] <- mats[i]
}
out
}
lapply(rpois(3, 1.2), \(x) matrix(rnorm(1), 1+x, 1+x)) |> blockdiag()
ncc[i]:ncc[i + 1]
ncc[i]:ncc[i + 1]
out
out[ncc[i]:ncc[i + 1], ncc[i]:ncc[i + 1]]
out[ncc[i]:ncc[i + 1], ncc[i]:ncc[i + 1]] <- mats[[i]]
out
out[ncc[i]:ncc[i + 1], ncc[i]:ncc[i + 1]] <- mats[[i]]
out
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
blockdiag <- function(mats, fill = 0) {
if (is.matrix(mats)) return(mats)
stopifnot("only square matrices are supported!" = sapply(mats, nrow) == (nc <- sapply(mats, ncol)))
out <- matrix(fill, sum(nc), sum(nc))
ncc <- c(1, cumsum(nc))
for (i in seq_along(mats)) {
out[ncc[i]:ncc[i + 1], ncc[i]:ncc[i + 1]] <- mats[[i]]
}
out
}
lapply(rpois(3, 1.2), \(x) matrix(rnorm(1), 1+x, 1+x)) |> blockdiag()
blockdiag <- function(mats, fill = 0) {
if (is.matrix(mats)) return(mats)
stopifnot("only square matrices are supported!" = sapply(mats, nrow) == (nc <- sapply(mats, ncol)))
out <- matrix(fill, sum(nc), sum(nc))
ncc <- c(1, cumsum(nc))
for (i in seq_along(mats)) {
browser()
out[ncc[i]:ncc[i + 1], ncc[i]:ncc[i + 1]] <- mats[[i]]
}
out
}
lapply(rpois(3, 1.2), \(x) matrix(rnorm(1), 1+x, 1+x)) |> blockdiag()
out[ncc[i]:ncc[i + 1], ncc[i]:ncc[i + 1]] <- mats[[i]]
out
blockdiag <- function(mats, fill = 0) {
if (is.matrix(mats)) return(mats)
stopifnot("only square matrices are supported!" = sapply(mats, nrow) == (nc <- sapply(mats, ncol)))
out <- matrix(fill, sum(nc), sum(nc))
ncc <- c(0, cumsum(nc))
for (i in seq_along(mats)) {
browser()
out[(ncc[i]+1):ncc[i + 1], (ncc[i]+1):ncc[i + 1]] <- mats[[i]]
}
out
}
lapply(rpois(3, 1.2), \(x) matrix(rnorm(1), 1+x, 1+x)) |> blockdiag()
smoking$treatment |> unique()
smoking$treatment |> factor() |> levels()
?relevel
smoking$treatment |> factor() |> levels() |> dput()
thromb$treatment |> factor() |> levels() |> dput()
xx <- read.csv("data-raw/thrombolytic_drugs.csv")
xx
xx <- read.csv("data-raw/smoking_cessation.csv")
smoking <- apply(xx, 1, \(x) {
trt <- as.character(x[-(1:2)])
ctrl <- rep(0, length(trt))
ctrl[as.integer(x[1])] <- 1
dd <- data.frame(study.id = as.integer(x[2]), treatment = names(xx)[-(1:2)],
cases = gsub(",", "", x = trt),
is.baseline = ctrl)
return(dd[dd$cases != "", ])
} , simplify = FALSE) |>
do.call(rbind, args = _)
smoking
cases.mat <- strsplit(smoking[[3]], "/", fixed = TRUE) |>
vapply(as.numeric, numeric(2)) |>
t()
colnames(cases.mat) <- c("rik", "nik")
smoking
smoking <- cbind(smoking[-3], cases.mat)
lvlnm <- c("No.contact..A." = "A - No contact",
"Self.help..B." = "B - Self help",
"Individual.counseling..C." = "C - Individual counseling",
"Group.counseling..D." = "D - Group counseling")
smoking$treatment <- stringr::str_replace_all(smoking$treatment, lvlnm) |>
factor(levels = lvlnm)
smoking
levels(smoking$treatment)
xx <- read.csv("data-raw/thrombolytic_drugs.csv")
thromb <- apply(xx, 1, \(x) {
trt <- as.character(x[-(1:2)])
ctrl <- rep(0, length(trt))
ctrl[as.integer(x[1])] <- 1
dd <- data.frame(study.id = as.integer(x[2]), treatment = names(xx)[-(1:2)],
cases = gsub(",", "", x = trt),
is.baseline = ctrl)
return(dd[dd$cases != "", ])
} , simplify = FALSE) |>
do.call(rbind, args = _)
cases.mat <- strsplit(thromb[[3]], "/", fixed = TRUE) |>
vapply(as.numeric, numeric(2)) |>
t()
colnames(cases.mat) <- c("rik", "nik")
thromb <- cbind(thromb[-3], cases.mat)
lvlnm <- c("SK..1." = "1 - SK",
"AtPA..2." = "2 - AtPA",
"t...PA..3." = "3 - t-PA",
"SK...tPA..4." = "4 - SK+tPA",
"Ten..5." = "5 - Ten",
"Ret..6." = "6 - Ret",
"UK..7." = "7 - UK",
"ASPAC..8." = "8 - ASPAC")
thromb$treatment <- stringr::str_replace_all(thromb$treatment, lvlnm) |>
factor(levels = lvlnm)
thromb
usethis::use_data(smoking, overwrite = TRUE)
usethis::use_data(thromb, overwrite = TRUE)
View(binomial)
View(binomial())
binomial()
binomial() |> str()
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
tesi.ncrr::smoking
tesi.ncrr::smoking[c(4:8), "treatment"] |> as.integer()
tesi.ncrr::smoking[c(4:8), "treatment"]
tesi.ncrr::smoking[c(4:6), "treatment"]
tesi.ncrr::smoking[c(4:6), "treatment"] |> as.integer()
tapply(smoking$treatment, smoking$study.level, as.integer)
tapply(smoking$treatment, smoking$study.id, as.integer)
match(smoking$treatment, smoking$treatment)
match(smoking$study.id, smoking$study.id)
?NotYetImplemented
category
is.R()
is.R
var(rnorm(1000, 0, 2))
var(2*rnorm(1000, 0, 2))
?logLik
ls()
ls(envir = asNamespace("stats"))
ls(envir = asNamespace("stats")) |> mget(mode = "function")[[1]]
(ls(envir = asNamespace("stats")) |> mget(mode = "function"))[[1]]
(ls(envir = asNamespace("stats")) |> mget(envir = asNamespace("stats"), mode = "function"))[[1]]
mget("acf", envir = asNamespace("stats"), mode = "function")
mget("acf", envir = asNamespace("stats"), mode = "function")[[1]]
mget(c("acf", "pacf"), envir = asNamespace("stats"), mode = "function")[[1]]
mget(c("logLik", "pacf"), envir = asNamespace("stats"), mode = "function") |> lapply(f = \(ff) body(ff)[[2]])
mget(c("logLik", "pacf"), envir = asNamespace("stats"), mode = "function") |> lapply(\(ff) body(ff)[[2]])
mget(c("logLik", "pacf"), envir = asNamespace("stats"), mode = "function") |> lapply(\(ff) body(ff))
mget(c("logLik", "pacf"), envir = asNamespace("stats"), mode = "function") |> lapply(\(ff) body(ff)[[1]])
mget(c("logLik", "pacf"), envir = asNamespace("stats"), mode = "function") |> lapply(\(ff) identical(body(ff)[[1]], as.symbol("UseMethod")))
mget(c("[.acf", "[.pacf"), envir = asNamespace("stats"), mode = "function") |> lapply(\(ff) identical(body(ff)[[1]], as.symbol("UseMethod")))
ls(envir = asNamespace("stats")) |> mget(envir = asNamespace("stats"), mode = "function", ifnotfound = NULL) |> lapply(\(ff) if (!is.function(ff)) FALSE else identical(body(ff)[[1]], as.symbol("UseMethod")))
ls(envir = asNamespace("stats")) |> mget(envir = asNamespace("stats"), mode = "function", ifnotfound = list())) |> lapply(\(ff) if (!is.function(ff)) FALSE else identical(body(ff)[[1]], as.symbol("UseMethod")))
ls(envir = asNamespace("stats")) |> mget(envir = asNamespace("stats"), mode = "function", ifnotfound = list()) |> lapply(\(ff) if (!is.function(ff)) FALSE else identical(body(ff)[[1]], as.symbol("UseMethod")))
ls(envir = asNamespace("stats")) |> mget(envir = asNamespace("stats"), mode = "function", ifnotfound = NA) |> lapply(\(ff) if (!is.function(ff)) FALSE else identical(body(ff)[[1]], as.symbol("UseMethod")))
ls(envir = asNamespace("stats")) |> mget(envir = asNamespace("stats"), mode = "function", ifnotfound = NA) |> Filter(f = \(ff) if (!is.function(ff) || is.symbol(body(ff))) FALSE else identical(body(ff)[[1]], as.symbol("UseMethod")))
names(.Last.value)
?getInitial
?proj
ls(envir = baseenv()) |> mget(envir = baseenv()), mode = "function", ifnotfound = NA) |> Filter(f = \(ff) if (!is.function(ff) || is.symbol(body(ff))) FALSE else identical(body(ff)[[1]], as.symbol("UseMethod")))
ls(envir = baseenv()) |> mget(envir = baseenv(), mode = "function", ifnotfound = NA) |> Filter(f = \(ff) if (!is.function(ff) || is.symbol(body(ff))) FALSE else identical(body(ff)[[1]], as.symbol("UseMethod")))
names(.Last.value)
?mean
?nameOfClass
