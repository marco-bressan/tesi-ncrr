mvcurr <- optim(par22[i, ], \(x) -opt.fn(x),
method = "Nelder-Mead",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
cat("Random start:", i, "; n. iter:", mvcurr$counts)
par22[i, ] <- mvcurr$par
}
par22 <- getInitial(des2, seed = c(alpha = 3, beta = 4, sigma20 = 6, sigma2 = 9),
rep = 50, transform = TRUE)
par22
for (i in 1:nrow(par22)) {
mvcurr <- optim(par22[i, ], \(x) -opt.fn(x),
method = "Nelder-Mead",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
cat("Random start:", i, "; n. iter:", mvcurr$counts)
par22[i, ] <- mvcurr$par
}
par22[i, ]
opt.fn
as.list(environment(opt.fn))
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
for (i in 1:nrow(par22)) {
mvcurr <- optim(par22[i, ], \(x) -opt.fn(x),
method = "Nelder-Mead",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
cat("Random start:", i, "; n. iter:", mvcurr$counts)
par22[i, ] <- mvcurr$par
}
params
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
par22 <- getInitial(des2, seed = c(alpha = 3, beta = 4, sigma20 = 6, sigma2 = 9),
rep = 50, transform = TRUE)
par22
par22[1, ] |> crr.split.par(3, TRUE)
par22 <- getInitial(des2, seed = c(alpha = 3, beta = 4, sigma20 = 6, sigma2 = 9),
rep = 50, transform = TRUE)
for (i in 1:nrow(par22)) {
mvcurr <- optim(par22[i, ], \(x) -opt.fn(x),
method = "Nelder-Mead",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
cat("Random start:", i, "; n. iter:", mvcurr$counts)
par22[i, ] <- mvcurr$par
}
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
par22 <- getInitial(des2, seed = c(alpha = 3, beta = 4, sigma20 = 6, sigma2 = 9),
rep = 50, transform = TRUE)
for (i in 1:nrow(par22)) {
mvcurr <- optim(par22[i, ], \(x) -opt.fn(x),
method = "Nelder-Mead",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
cat("Random start:", i, "; n. iter:", mvcurr$counts[1], "\n")
par22[i, ] <- mvcurr$par
}
save.image("optim1.rda")
devtools::load_all(".")
data("smoking", package = "tesi.ncrr")
ls()
smoking$tik <- with(smoking, log(rik) - log(nik - rik))
names(smoking)
des <- ncrr.design(smoking)
str(des)
des
theta.oss <- smoking[smoking$study.id == 3, "tik"]
Gamma <- crr.vcov.within(smoking[smoking$study.id == 3, "rik"],
smoking[smoking$study.id == 3, "nik"])
param.mv0 <- optim(c(0, 1, 0, 1, 0, 1), \(x) -llik1(x, theta.oss, Gamma),
lower = c(-Inf, -Inf, -Inf, 1e-10, -1, 1e-10),
upper = c(Inf, Inf, Inf, Inf, 1, Inf),
method = "L-BFGS-B",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
des1 <- subset(des, which(sapply(des$design, \(d) identical(c(0, 1), d))))
str(des1)
par.init <- getInitial(des1, transform = FALSE)
do.call(crr.get.mu,
append(list(des1),
crr.split.par(param.mv0$par, np = 1)[c("alpha", "beta", "mu0")]))
do.call(crr.get.sigma,
append(list(des1),
crr.split.par(param.mv0$par, np = 1)[c("beta", "sigma20", "rho", "sigma2")]))
do.call(crr.get.sigma,
append(list(des1),
crr.split.par(par.init, np = 1)[c("beta", "sigma20", "rho", "sigma2")]))
opt.fn <- get.llik.from.design(des1, echo = 3, transform = FALSE)
param.mv1 <- optim(par.init, \(x) -opt.fn(x),
lower = attr(par.init, "lower"),
upper = attr(par.init, "upper"),
method = "L-BFGS-B",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
opt.fn <- get.llik.from.design(des1, echo = 3, transform = TRUE)
param.mv12 <- optim(getInitial(des1, transform = TRUE), \(x) -opt.fn2(x),
method = "Nelder-Mead",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
des1
param.mv1
des1$theta
param.explicit <- crr.split.par(param.mv1$par, 1, FALSE)
param.explicit
with(param.explicit,
((des1$theta[1] * beta - des1$theta[2]) * sigma20 +
(mu0 * beta - des1$theta[2]) * des1$gamma[1]) / (sigma20 + des1$gamma[1]))
with(param.explicit,
-((des1$theta[1] * beta - des1$theta[2]) * sigma20 +
(mu0 * beta - des1$theta[2]) * des1$gamma[1]) / (sigma20 + des1$gamma[1]))
param.explicit
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
maxima2tex("data-raw/diff_score2.txt")
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
maxima2tex("data-raw/diff_score2.txt")
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
maxima2tex("data-raw/diff_score2.txt")
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
maxima2tex("data-raw/diff_score2.txt")
mvcurr
par22
q()
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
devtools::load_all(".")
data("smoking", package = "tesi.ncrr")
ls()
smoking$tik <- with(smoking, log(rik) - log(nik - rik))
names(smoking)
# specifico il design della meta-analisi
des <- ncrr.design(smoking)
str(des)
des
des2 <- subset(des, c(1, 3:4, 6:8))
str(des2)
par.init <- getInitial(des2, transform = TRUE)
# calcoli dei parametri della normale per hat(theta)
# prova per i mu0
do.call(crr.get.mu,
append(list(des2),
crr.split.par(par.init, np = 3, transform = TRUE)[c("alpha", "beta", "mu0")]))
# prova per i sigma
do.call(crr.get.sigma,
append(list(des2),
crr.split.par(par.init, np = 3, transform = TRUE)[c("beta", "sigma20", "rho", "sigma2")]))
#'
#' Conduco l'ottimizzazione sui parametri modificati (il log per i parametri di varianza,
#' la trasformata di Fisher per la correlazione) tramite Nelder-Mead.
#'
opt.fn <- get.llik.from.design(des2, echo = 0, transform = TRUE)
#| output: false
param.mv2 <- optim(par.init, \(x) -opt.fn(x),
#lower = attr(par.init, "lower"),
#upper = attr(par.init, "upper"),
method = "Nelder-Mead",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
diag(1)
tcrossprod(1:2)
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
param.mv2 <- optim(par.init, \(x) -opt.fn(x),
#lower = attr(par.init, "lower"),
#upper = attr(par.init, "upper"),
method = "Nelder-Mead",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
param.mv2
#| output: true
# stime MV in formato leggibile
crr.split.par(param.mv2$par, 3, TRUE)
sann.mv2 <- optim(par.init, \(x) -opt.fn(x),
#lower = attr(par.init, "lower"),
#upper = attr(par.init, "upper"),
method = "SANN",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6,
temp = 10, tmax = 10, trace = 1))
# confronto dei parametri
all.equal(crr.split.par(param.mv2$par, 3, TRUE),
crr.split.par(sann.mv2$par, 3, TRUE))
# confronto dei valori della f.o.
c(valore_ottimo_NELMEAD = (param.mv2$value),
valore_ottimo_SANN = sann.mv2$value,
differenza = param.mv2$value - sann.mv2$value)
load("../sann_optim.rda")
save(sann.mv2, file = "sann_optim.rda")
load("sann_optim.rda")
do.call(crr.get.sigma,
append(list(des2),
crr.split.par(par.init, np = 3, transform = TRUE)[c("beta", "sigma20", "rho", "sigma2")]))
subst.params
source("~/UNIPD Scienze Statistiche/tesi-ncrr/data-raw/simul1.r")
rm(list=ls())
gc()
#| output: false
devtools::load_all(".")
smoking$tik <- with(smoking, log(rik) - log(nik - rik))
smoking$tik
names(smoking)
des <- ncrr.design(smoking)
str(des)
des
theta.oss <- smoking[smoking$study.id == 3, "tik"]
Gamma <- crr.vcov.within(smoking[smoking$study.id == 3, "rik"],
smoking[smoking$study.id == 3, "nik"])
#| output: false
param.mv0 <- optim(c(0, 1, 0, 1, 0, 1), \(x) -llik1(x, theta.oss, Gamma),
lower = c(-Inf, -Inf, -Inf, 1e-10, -1, 1e-10),
upper = c(Inf, Inf, Inf, Inf, 1, Inf),
method = "L-BFGS-B",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
theta.oss <- smoking[smoking$study.id == 3, "tik"]
Gamma <- crr.vcov.within(smoking[smoking$study.id == 3, "rik"],
smoking[smoking$study.id == 3, "nik"])
#| output: false
param.mv0 <- optim(c(0, 1, 0, 1, 0, 1), \(x) -llik1(x, theta.oss, Gamma),
lower = c(-Inf, -Inf, -Inf, 1e-10, -1, 1e-10),
upper = c(Inf, Inf, Inf, Inf, 1, Inf),
method = "L-BFGS-B",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
debug(crr.vcov)
param.mv0 <- optim(c(0, 1, 0, 1, 0, 1), \(x) -llik1(x, theta.oss, Gamma),
lower = c(-Inf, -Inf, -Inf, 1e-10, -1, 1e-10),
upper = c(Inf, Inf, Inf, Inf, 1, Inf),
method = "L-BFGS-B",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
# minore matrice vcov ottenuto togliendo la prima riga e la prima colonna
#if (length(beta) > 1 && all(c(beta, sigma20, sigma2) != 1)) browser()
sigma2 <- sqrt(sigma2)
sigma2
vv <- tcrossprod(c(1, beta)) * sigma20
vv
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
param.mv0 <- optim(c(0, 1, 0, 1, 0, 1), \(x) -llik1(x, theta.oss, Gamma),
lower = c(-Inf, -Inf, -Inf, 1e-10, -1, 1e-10),
upper = c(Inf, Inf, Inf, Inf, 1, Inf),
method = "L-BFGS-B",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
param.mv0
toy1 <- subset(des, c(4, 6))
str(toy1)
init1 <- getInitial(toy1, transform = FALSE)
# invoco la funzione di ottimizzazione a partire dal design specificato
fn1 <- get.llik.from.design(toy1, echo = 0, transform = FALSE)
#| output: false
# ottimizzazione vincolata
mv1 <- optim(init1, \(x) -fn1(x),
lower = attr(init1, "lower"),
upper = attr(init1, "upper"),
method = "L-BFGS-B",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
# confronto i parametri calcolati con l'ottimizzatore...
param1 <- crr.split.par(mv1$par, 2)
param1
source("diff_alpha1.R")
# controllo l'esito dell'ottimizzazione
source("data-raw/diff_alpha1.R")
with(mv1, cat("Esito: ", convergence, " - ",
if (is.null(message)) "OK" else message, "\n"))
alphahat <- do.call(alpha.cf1, append(param1[c("sigma2", "beta", "sigma20", "mu0")],
list(design = toy1)))
alphahat # alpha calcolato in forma chiusa
sigmahat <- do.call(sigma.cf1, append(param1[c("beta", "sigma20", "mu0")],
list(design = toy1)))
sigmahat # sigma2 calcolato in forma chiusa
param1
# fisso parametro alpha
fixpar <- list(alpha = alphahat)
# disabilito stampa dei passaggi intermedi con `echo = 0`
fn1 <- get.llik.from.design(toy1, echo = 0, transform = FALSE)
mv1f <- optim(init1, \(x) -fn1(x, fixed = fixpar),
lower = attr(init1, "lower"),
upper = attr(init1, "upper"),
method = "L-BFGS-B",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
# confronto tra i parametri da stima non vincolata e vincolata rispettivamente
all.equal(crr.split.par(mv1$par, 2),
subst.params(crr.split.par(mv1f$par, 2), fixpar))
c(valore_ottimo = (mv1$value),
valore_ottimo_vincolato = mv1f$value,
differenza = mv1$value - mv1f$value)
toy2 <- subset(des, c(4, 5))
str(toy2)
init2 <- getInitial(toy2, transform = FALSE)
fn2 <- get.llik.from.design(toy2, echo = 1, transform = FALSE)
#| output: false
mv2 <- optim(init2, \(x) -fn2(x),
lower = attr(init2, "lower"),
upper = attr(init2, "upper"),
method = "L-BFGS-B",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
with(mv2, cat("Esito: ", convergence, " - ",
if (is.null(message)) "OK" else message, "\n"))
mv2$message
param2 <- crr.split.par(mv2$par, 1)
param2
alphahat <- do.call(alpha.cf2, append(param2[c("sigma2", "beta", "sigma20", "mu0")],
list(design = toy2)))
alphahat
sigmahat <- do.call(sigma.cf2, append(param2[c("alpha", "beta", "sigma20", "mu0")],
list(design = toy2)))
sigmahat
fixpar <- list(alpha = alphahat)
fn2 <- get.llik.from.design(toy2, echo = 0, transform = FALSE)
mv2f <- optim(init2, \(x) -fn2(x, fixed = fixpar),
lower = attr(init2, "lower"),
upper = attr(init2, "upper"),
method = "L-BFGS-B",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
# confronto i parametri
all.equal(crr.split.par(mv2$par, 1),
subst.params(crr.split.par(mv2f$par, 1), fixpar))
c(valore_ottimo = (mv2$value),
valore_ottimo_vincolato = mv2f$value,
differenza = mv2$value - mv2f$value)
des1 <- subset(des, which(sapply(des$design, \(d) identical(c(0, 1), d))))
str(des1)
par.init <- getInitial(des1, transform = FALSE)
par.init
do.call(crr.get.mu,
append(list(des1),
crr.split.par(param.mv0$par, np = 1)[c("alpha", "beta", "mu0")]))
# prova per i sigma
do.call(crr.get.sigma,
append(list(des1),
crr.split.par(param.mv0$par, np = 1)[c("beta", "sigma20", "rho", "sigma2")]))
do.call(crr.get.sigma,
append(list(des1),
crr.split.par(par.init, np = 1)[c("beta", "sigma20", "rho", "sigma2")]))
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
do.call(crr.get.sigma,
append(list(des1),
crr.split.par(par.init, np = 1)[c("beta", "sigma20", "rho", "sigma2")]))
do.call(crr.get.sigma,
append(list(des1, type = "simplified"),
crr.split.par(par.init, np = 1)[c("beta", "sigma20", "rho", "sigma2")]))
...names
?sys.call
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
do.call(crr.get.sigma,
append(list(des1, type = "simplified"),
crr.split.par(par.init, np = 1)[c("beta", "sigma20", "rho", "sigma2")]))
sys.call()
sys.calls()
sys.parent()
sys.parent(2)
warning("ciao")
message
message("ciao")
warning("ciao", domain = "fds")
message("ciao", domain = "fds")
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
do.call(crr.get.sigma,
append(list(des1, type = "simplified"),
crr.split.par(par.init, np = 1)[c("beta", "sigma20", "rho", "sigma2")]))
do.call(crr.get.sigma,
append(list(des1, type = "simplified"),
crr.split.par(par.init, np = 1)[c("beta", "sigma20", "rho", "sigma2")]))
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
param.mv0$par
crr.split.par(param.mv0$par, np = 1)
par.init
do.call(crr.get.sigma,
append(list(des1, type = "achana"),
crr.split.par(par.init, np = 1)[c("beta", "sigma20", "rho", "sigma2")]))
devtools::load_all("~/UNIPD Scienze Statistiche/tesi-ncrr")
do.call(crr.get.sigma,
append(list(des1, type = "achana"),
crr.split.par(par.init, np = 1)[c("beta", "sigma20", "rho", "sigma2")]))
opt.fn <- get.llik.from.design(des1, echo = 3, transform = FALSE)
#| output: false
param.mv1 <- optim(par.init, \(x) -opt.fn(x),
lower = attr(par.init, "lower"),
upper = attr(par.init, "upper"),
method = "L-BFGS-B",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
#| output: true
# Stime MV in formato leggibile
crr.split.par(param.mv1$par, 1, FALSE)
opt.fn <- get.llik.from.design(des1, echo = 3, transform = TRUE)
param.mv12 <- optim(getInitial(des1, transform = TRUE), \(x) -opt.fn(x),
method = "Nelder-Mead",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
#| output: true
param.mv12
#| output: true
crr.split.par(param.mv12, 1, TRUE)
#| output: true
crr.split.par(param.mv12, 2, TRUE)
#| output: true
crr.split.par(param.mv12$par, 1, TRUE)
par2 <- getInitial(des1, seed = c(alpha = 3, beta = 4, sigma20 = 6, sigma2 = 9),
rep = 50, transform = TRUE)
par2
for (i in 1:nrow(par2)) {
mvcurr <- optim(par2[i, ], \(x) -opt.fn(x),
method = "Nelder-Mead",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
print(mvcurr$counts)
par2[i, ] <- mvcurr$par
}
#'
#' Ottimizzazione con random start
#'
environment(opt.fn)$echo <- 0
for (i in 1:nrow(par2)) {
mvcurr <- optim(par2[i, ], \(x) -opt.fn(x),
method = "Nelder-Mead",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
print(mvcurr$counts)
par2[i, ] <- mvcurr$par
}
crr.split.par(par2, transform = TRUE, np = 1) |>
do.call(cbind, args = _) |>
apply(2, \(x) c(min = min(x), max = max(x), mediana = median(x),
media = mean(x), dev.std = sd(x),
scarto.medio.assoluto.mediana = mean(abs(x - median(x))))) |>
t() |>
as.data.frame()
crr.split.par(par2, transform = TRUE, np = 1) |>
do.call(cbind, args = _) |>
apply(2, \(x) table(cut(x))) |>
t() |>
as.data.frame()
crr.split.par(par2, transform = TRUE, np = 1) |>
do.call(cbind, args = _) |>
apply(2, \(x) table(cut(x, breaks = 4))) |>
t() |>
as.data.frame()
?cut
crr.split.par(par2, transform = TRUE, np = 1) |>
do.call(cbind, args = _) |>
apply(2, \(x) table(cut(x, breaks = 4)), simplify = FALSE)
crr.split.par(par2, transform = TRUE, np = 1) |>
do.call(cbind, args = _) |>
apply(2, \(x) table(cut(x, breaks = 5)), simplify = FALSE)
des2 <- subset(des, c(1, 3:4, 6:8))
opt.fn <- get.llik.from.design(des1, echo = 3, transform = TRUE,
vcov.type = "simplified")
param.mv12 <- optim(getInitial(des1, transform = TRUE), \(x) -opt.fn(x),
method = "Nelder-Mead",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
#| output: true
crr.split.par(param.mv12$par, 1, TRUE)
#'
#' Ottimizzazione con random start
#'
environment(opt.fn)$echo <- 0
par2 <- getInitial(des1, seed = c(alpha = 3, beta = 4, sigma20 = 6, sigma2 = 9),
rep = 50, transform = TRUE)
par3 <- getInitial(des1, seed = c(alpha = 3, beta = 4, sigma20 = 6, sigma2 = 9),
rep = 50, transform = TRUE)
all.equal(par2, par3)
par3 <- getInitial(des1, seed = c(alpha = 3, beta = 1, sigma20 = 6, sigma2 = 9),
rep = 50, transform = TRUE)
all.equal(par2, par3)
for (i in 1:nrow(par2)) {
mvcurr <- optim(par2[i, ], \(x) -opt.fn(x),
method = "Nelder-Mead",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
print(mvcurr$counts)
par2[i, ] <- mvcurr$par
}
crr.split.par(par2, transform = TRUE, np = 1) |>
do.call(cbind, args = _) |>
apply(2, \(x) c(min = min(x), max = max(x), mediana = median(x),
media = mean(x), dev.std = sd(x),
scarto.medio.assoluto.mediana = mean(abs(x - median(x))))) |>
t() |>
as.data.frame()
crr.split.par(par2, transform = TRUE, np = 1) |>
do.call(cbind, args = _) |>
apply(2, \(x) table(cut(x, breaks = 5)), simplify = FALSE)
opt.fn <- get.llik.from.design(des1, echo = 3, transform = TRUE,
vcov.type = "achana")
param.mv12 <- optim(getInitial(des1, transform = TRUE), \(x) -opt.fn(x),
method = "Nelder-Mead",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6))
#| output: true
crr.split.par(param.mv12$par, 1, TRUE)
#'
#' Ottimizzazione con random start
#'
environment(opt.fn)$echo <- 0
par2 <- getInitial(des1, seed = c(alpha = 3, beta = 4, sigma20 = 6, sigma2 = 9),
rep = 50, transform = TRUE)
for (i in 1:nrow(par2)) {
capture.output(type = "message",
mvcurr <- optim(par2[i, ], \(x) -opt.fn(x),
method = "Nelder-Mead",
control = list(fnscale = 1e-10, factr = 1, maxit = 1e6)))
print(mvcurr$counts)
par2[i, ] <- mvcurr$par
}
# stampa di statistiche descrittive per tutti i valori ottimizzati
crr.split.par(par2, transform = TRUE, np = 1) |>
do.call(cbind, args = _) |>
apply(2, \(x) c(min = min(x), max = max(x), mediana = median(x),
media = mean(x), dev.std = sd(x),
scarto.medio.assoluto.mediana = mean(abs(x - median(x))))) |>
t() |>
as.data.frame()
par2
crr.split.par(par2, transform = TRUE, np = 1) |>
do.call(cbind, args = _) |>
apply(2, \(x) c(min = min(x), max = max(x), mediana = median(x),
media = mean(x), dev.std = sd(x),
scarto.medio.assoluto.mediana = mean(abs(x - median(x))))) |>
t() |>
as.data.frame()
crr.split.par(par2, transform = TRUE, np = 1) |>
do.call(cbind, args = _) |>
apply(2, \(x) table(cut(x, breaks = 5)), simplify = FALSE)
crr.split.par(par2[, c("mu0", "beta", "alpha", "sigma20")], transform = TRUE, np = 1) |>
do.call(cbind, args = _) |>
apply(2, \(x) c(min = min(x), max = max(x), mediana = median(x),
media = mean(x), dev.std = sd(x),
scarto.medio.assoluto.mediana = mean(abs(x - median(x))))) |>
t() |>
as.data.frame()
par2
